// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  user_id   String  @id @default(uuid()) @db.Uuid
  firstname String
  lastname  String
  active    Boolean
  username  String  @unique
  Role      Roles[]
}

model Roles {
  role_id  String  @id @default(uuid()) @db.Uuid
  username String
  role     String
  active   Boolean
  User     Users   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)

  @@index([username])
}

model Transactions {
  transaction_num     Int                  @id @unique @default(autoincrement())
  transaction_id      String               @unique @default(uuid()) @db.Uuid
  date_created        DateTime             @db.Timestamp()
  transaction_type    String
  customer_id         String               @db.Uuid
  bike_id             String?              @db.Uuid
  total_cost          Int
  description         String?
  is_completed        Boolean
  is_paid             Boolean
  is_refurb           Boolean
  is_urgent           Boolean
  is_nuclear          Boolean?
  is_beer_bike        Boolean
  is_employee         Boolean
  is_reserved         Boolean
  is_waiting_on_email Boolean
  date_completed      DateTime?            @db.Timestamp()
  Customer            Customers            @relation(fields: [customer_id], references: [customer_id])
  Bike                Bikes?               @relation(fields: [bike_id], references: [bike_id])
  TransactionLogs     TransactionLogs[]
  OrderRequests       OrderRequests[]
  TransactionDetails  TransactionDetails[]
}

model TransactionLogs {
  log_id         String   @id @default(uuid()) @db.Uuid
  date_modified  DateTime @db.Timestamp()
  transaction_id Int      @unique
  changed_by     String   @db.Uuid
  change_type    String

  Transactions Transactions @relation(fields: [transaction_id], references: [transaction_num])
}

model OrderRequests {
  order_request_id String   @id @default(uuid()) @db.Uuid
  created_by       String   @db.Uuid
  transaction_id   Int
  item_id          String   @db.Char(12)
  date_created     DateTime @db.Timestamp()
  notes            String?

  Transactions Transactions @relation(fields: [transaction_id], references: [transaction_num])
  Items        Items        @relation(fields: [item_id], references: [upc])
}

model Bikes {
  bike_id      String         @id @default(uuid()) @db.Uuid
  make         String
  model        String
  date_created DateTime       @db.Timestamp()
  description  String?
  Transactions Transactions[]
}

model Items {
  upc                String               @id @db.Char(12)
  name               String
  description        String?
  brand              String?
  date_created       DateTime
  stock              Int
  minimum_stock      Int
  standard_price     Int
  wholesale_cost     Int
  condition          String
  is_disabled        Boolean
  is_managed         Boolean
  category_1         String?
  category_2         String?
  category_3         String?
  specifications     Json
  features           Json
  OrderRequests      OrderRequests[]
  TransactionDetails TransactionDetails[]
}

model Repairs {
  repair_id          String               @id @default(uuid()) @db.Uuid
  name               String
  price              Int
  disabled           Boolean
  description        String?
  TransactionDetails TransactionDetails[]
}

model Customers {
  customer_id  String         @id @default(uuid()) @db.Uuid
  first_name   String
  last_name    String
  email        String
  phone        String?        @db.Char(10)
  Transactions Transactions[]
}

model TransactionDetails {
  transaction_detail_id String   @id @default(uuid()) @db.Uuid
  transaction_id        String   @default(uuid()) @db.Uuid
  item_id               String?  @db.Char(12) //upc
  repair_id             String?  @db.Uuid
  changed_by            String?  @db.Uuid
  quantity              Int
  date_modified         DateTime

  Transactions Transactions @relation(fields: [transaction_id], references: [transaction_id])
  Item         Items?       @relation(fields: [item_id], references: [upc])
  Repair       Repairs?     @relation(fields: [repair_id], references: [repair_id])
}

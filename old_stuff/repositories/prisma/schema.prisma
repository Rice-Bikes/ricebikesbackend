// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

model Users {
  user_id                String            @id @default(uuid()) @db.Uuid
  firstname              String
  lastname               String
  active                 Boolean
  username               String            @unique
  OrderRequests          OrderRequests[]
  TransactionLogs        TransactionLogs[]
  UserRoles              UserRoles[]
  WorkflowStepsCreated   WorkflowSteps[]   @relation("WorkflowStepsCreatedBy")
  WorkflowStepsCompleted WorkflowSteps[]   @relation("WorkflowStepsCompletedBy")
}

model Roles {
  role_id         String            @id @default(uuid()) @db.Uuid
  name            String
  disabled        Boolean
  description     String?
  UserRoles       UserRoles[]
  RolePermissions RolePermissions[]
}

model UserRoles {
  user_id String @db.Uuid
  role_id String @db.Uuid
  User    Users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Role    Roles  @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([user_id, role_id])
}

model Permissions {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String
  RolePermissions RolePermissions[]
}

model RolePermissions {
  role_id       String      @db.Uuid
  permission_id Int
  Role          Roles       @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  Permission    Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}

model Transactions {
  transaction_num     Int                  @id @unique @default(autoincrement())
  transaction_id      String               @unique @default(uuid()) @db.Uuid
  date_created        DateTime             @db.Timestamp()
  transaction_type    String
  customer_id         String               @db.Uuid
  bike_id             String?              @db.Uuid
  total_cost          Float
  description         String?
  is_completed        Boolean
  is_paid             Boolean
  is_refurb           Boolean
  is_urgent           Boolean
  is_nuclear          Boolean?
  is_beer_bike        Boolean
  is_employee         Boolean
  is_reserved         Boolean
  is_waiting_on_email Boolean
  date_completed      DateTime?            @db.Timestamp()
  Customer            Customers            @relation(fields: [customer_id], references: [customer_id])
  Bike                Bikes?               @relation(fields: [bike_id], references: [bike_id])
  TransactionLogs     TransactionLogs[]
  OrderRequests       OrderRequests[]
  TransactionDetails  TransactionDetails[]
  WorkflowSteps       WorkflowSteps[]
}

model TransactionLogs {
  log_id          String   @id @default(uuid()) @db.Uuid
  date_modified   DateTime @db.Timestamp()
  transaction_num Int
  changed_by      String   @db.Uuid
  change_type     String
  description     String

  Transactions Transactions @relation(fields: [transaction_num], references: [transaction_num])
  Users        Users        @relation(fields: [changed_by], references: [user_id])
}

model OrderRequests {
  order_request_id String   @id @default(uuid()) @db.Uuid
  created_by       String   @db.Uuid
  transaction_id   String   @db.Uuid
  item_id          String   @db.Uuid
  date_created     DateTime @db.Timestamp()
  quantity         Int
  notes            String?
  ordered          Boolean

  Transaction Transactions? @relation(fields: [transaction_id], references: [transaction_id])
  Item        Items         @relation(fields: [item_id], references: [item_id])
  User        Users         @relation(fields: [created_by], references: [user_id])
}

model Bikes {
  bike_id                 String         @id @default(uuid()) @db.Uuid
  make                    String
  model                   String
  date_created            DateTime       @db.Timestamp()
  description             String?
  bike_type               String?        @db.VarChar(50)
  size_cm                 Decimal?       @db.Decimal(5, 2)
  condition               String?        @default("Used") @db.VarChar(20)
  price                   Decimal?       @db.Decimal(10, 2)
  is_available            Boolean        @default(true)
  weight_kg               Decimal?       @db.Decimal(5, 2)
  reservation_customer_id String?        @db.Uuid
  deposit_amount          Decimal?       @db.Decimal(10, 2)
  Transactions            Transactions[]
  ReservationCustomer     Customers?     @relation("BikeReservations", fields: [reservation_customer_id], references: [customer_id])

  @@index([bike_type])
  @@index([size_cm])
  @@index([condition])
  @@index([is_available])
  @@index([reservation_customer_id])
}

model Items {
  item_id            String               @id @default(uuid()) @db.Uuid
  upc                String               @unique
  name               String
  description        String?
  brand              String?
  stock              Int
  minimum_stock      Int?
  standard_price     Float
  wholesale_cost     Float
  condition          String?
  disabled           Boolean
  managed            Boolean?
  category_1         String?
  category_2         String?
  category_3         String?
  specifications     Json?
  features           Json?
  OrderRequests      OrderRequests[]
  TransactionDetails TransactionDetails[]
}

model Repairs {
  repair_id          String               @id @default(uuid()) @db.Uuid
  name               String
  price              Int
  disabled           Boolean
  description        String?
  TransactionDetails TransactionDetails[]
}

model Customers {
  customer_id   String         @id @default(uuid()) @db.Uuid
  first_name    String
  last_name     String
  email         String
  phone         String?        @db.Char(10)
  Transactions  Transactions[]
  ReservedBikes Bikes[]        @relation("BikeReservations")
}

model TransactionDetails {
  transaction_detail_id String   @id @default(uuid()) @db.Uuid
  transaction_id        String   @default(uuid()) @db.Uuid
  item_id               String?  @db.Uuid
  repair_id             String?  @db.Uuid
  changed_by            String?  @db.Uuid
  completed             Boolean
  quantity              Int
  date_modified         DateTime

  Transactions Transactions @relation(fields: [transaction_id], references: [transaction_id])
  Item         Items?       @relation(fields: [item_id], references: [item_id])
  Repair       Repairs?     @relation(fields: [repair_id], references: [repair_id])
}

model FeatureFlagAudit {
  id         Int      @id @default(autoincrement())
  flag_name  String   @db.VarChar
  old_value  Boolean?
  new_value  Boolean?
  changed_by String   @db.VarChar
  changed_at DateTime @default(now()) @db.Timestamp(6)
  reason     String?
  details    Json?
}

model Order {
  order_id           String   @id @default(uuid())
  order_date         DateTime @default(now())
  estimated_delivery DateTime
  supplier           String
  ordered_by         String

  @@map("order")
}

model FeatureFlags {
  flag_name   String   @id @db.VarChar
  value       Boolean
  description String?
  status      String?  @default("active") @db.VarChar(32)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  updated_by  String   @db.VarChar
}

model WorkflowSteps {
  step_id        String    @id @default(uuid()) @db.Uuid
  transaction_id String    @db.Uuid
  workflow_type  String    @db.VarChar(50) // 'bike_sales', 'repair_process', 'order_fulfillment', etc.
  step_name      String    @db.VarChar(100)
  step_order     Int // Order of step in workflow (1, 2, 3, etc.)
  is_completed   Boolean   @default(false)
  created_by     String    @db.Uuid
  completed_by   String?   @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  completed_at   DateTime? @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)

  // Relations
  Transaction     Transactions @relation(fields: [transaction_id], references: [transaction_id], onDelete: Cascade)
  CreatedByUser   Users?       @relation("WorkflowStepsCreatedBy", fields: [created_by], references: [user_id])
  CompletedByUser Users?       @relation("WorkflowStepsCompletedBy", fields: [completed_by], references: [user_id])

  @@unique([transaction_id, workflow_type, step_order])
  @@index([transaction_id])
  @@index([workflow_type])
  @@index([transaction_id, workflow_type])
}
